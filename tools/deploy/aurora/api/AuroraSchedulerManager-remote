#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,slots,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from aurora.api import AuroraSchedulerManager
from aurora.api.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  Response createJob(JobConfiguration description)')
  print('  Response scheduleCronJob(JobConfiguration description)')
  print('  Response descheduleCronJob(JobKey job)')
  print('  Response startCronJob(JobKey job)')
  print('  Response restartShards(JobKey job,  shardIds)')
  print('  Response killTasks(JobKey job,  instances, string message)')
  print('  Response addInstances(InstanceKey key, i32 count)')
  print('  Response replaceCronTemplate(JobConfiguration config)')
  print('  Response startJobUpdate(JobUpdateRequest request, string message)')
  print('  Response pauseJobUpdate(JobUpdateKey key, string message)')
  print('  Response resumeJobUpdate(JobUpdateKey key, string message)')
  print('  Response abortJobUpdate(JobUpdateKey key, string message)')
  print('  Response rollbackJobUpdate(JobUpdateKey key, string message)')
  print('  Response pulseJobUpdate(JobUpdateKey key)')
  print('  Response getRoleSummary()')
  print('  Response getJobSummary(string role)')
  print('  Response getTasksStatus(TaskQuery query)')
  print('  Response getTasksWithoutConfigs(TaskQuery query)')
  print('  Response getPendingReason(TaskQuery query)')
  print('  Response getConfigSummary(JobKey job)')
  print('  Response getJobs(string ownerRole)')
  print('  Response getQuota(string ownerRole)')
  print('  Response populateJobConfig(JobConfiguration description)')
  print('  Response getJobUpdateSummaries(JobUpdateQuery jobUpdateQuery)')
  print('  Response getJobUpdateDetails(JobUpdateKey key, JobUpdateQuery query)')
  print('  Response getJobUpdateDiff(JobUpdateRequest request)')
  print('  Response getTierConfigs()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = AuroraSchedulerManager.Client(protocol)
transport.open()

if cmd == 'createJob':
  if len(args) != 1:
    print('createJob requires 1 args')
    sys.exit(1)
  pp.pprint(client.createJob(eval(args[0]),))

elif cmd == 'scheduleCronJob':
  if len(args) != 1:
    print('scheduleCronJob requires 1 args')
    sys.exit(1)
  pp.pprint(client.scheduleCronJob(eval(args[0]),))

elif cmd == 'descheduleCronJob':
  if len(args) != 1:
    print('descheduleCronJob requires 1 args')
    sys.exit(1)
  pp.pprint(client.descheduleCronJob(eval(args[0]),))

elif cmd == 'startCronJob':
  if len(args) != 1:
    print('startCronJob requires 1 args')
    sys.exit(1)
  pp.pprint(client.startCronJob(eval(args[0]),))

elif cmd == 'restartShards':
  if len(args) != 2:
    print('restartShards requires 2 args')
    sys.exit(1)
  pp.pprint(client.restartShards(eval(args[0]),eval(args[1]),))

elif cmd == 'killTasks':
  if len(args) != 3:
    print('killTasks requires 3 args')
    sys.exit(1)
  pp.pprint(client.killTasks(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'addInstances':
  if len(args) != 2:
    print('addInstances requires 2 args')
    sys.exit(1)
  pp.pprint(client.addInstances(eval(args[0]),eval(args[1]),))

elif cmd == 'replaceCronTemplate':
  if len(args) != 1:
    print('replaceCronTemplate requires 1 args')
    sys.exit(1)
  pp.pprint(client.replaceCronTemplate(eval(args[0]),))

elif cmd == 'startJobUpdate':
  if len(args) != 2:
    print('startJobUpdate requires 2 args')
    sys.exit(1)
  pp.pprint(client.startJobUpdate(eval(args[0]),args[1],))

elif cmd == 'pauseJobUpdate':
  if len(args) != 2:
    print('pauseJobUpdate requires 2 args')
    sys.exit(1)
  pp.pprint(client.pauseJobUpdate(eval(args[0]),args[1],))

elif cmd == 'resumeJobUpdate':
  if len(args) != 2:
    print('resumeJobUpdate requires 2 args')
    sys.exit(1)
  pp.pprint(client.resumeJobUpdate(eval(args[0]),args[1],))

elif cmd == 'abortJobUpdate':
  if len(args) != 2:
    print('abortJobUpdate requires 2 args')
    sys.exit(1)
  pp.pprint(client.abortJobUpdate(eval(args[0]),args[1],))

elif cmd == 'rollbackJobUpdate':
  if len(args) != 2:
    print('rollbackJobUpdate requires 2 args')
    sys.exit(1)
  pp.pprint(client.rollbackJobUpdate(eval(args[0]),args[1],))

elif cmd == 'pulseJobUpdate':
  if len(args) != 1:
    print('pulseJobUpdate requires 1 args')
    sys.exit(1)
  pp.pprint(client.pulseJobUpdate(eval(args[0]),))

elif cmd == 'getRoleSummary':
  if len(args) != 0:
    print('getRoleSummary requires 0 args')
    sys.exit(1)
  pp.pprint(client.getRoleSummary())

elif cmd == 'getJobSummary':
  if len(args) != 1:
    print('getJobSummary requires 1 args')
    sys.exit(1)
  pp.pprint(client.getJobSummary(args[0],))

elif cmd == 'getTasksStatus':
  if len(args) != 1:
    print('getTasksStatus requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTasksStatus(eval(args[0]),))

elif cmd == 'getTasksWithoutConfigs':
  if len(args) != 1:
    print('getTasksWithoutConfigs requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTasksWithoutConfigs(eval(args[0]),))

elif cmd == 'getPendingReason':
  if len(args) != 1:
    print('getPendingReason requires 1 args')
    sys.exit(1)
  pp.pprint(client.getPendingReason(eval(args[0]),))

elif cmd == 'getConfigSummary':
  if len(args) != 1:
    print('getConfigSummary requires 1 args')
    sys.exit(1)
  pp.pprint(client.getConfigSummary(eval(args[0]),))

elif cmd == 'getJobs':
  if len(args) != 1:
    print('getJobs requires 1 args')
    sys.exit(1)
  pp.pprint(client.getJobs(args[0],))

elif cmd == 'getQuota':
  if len(args) != 1:
    print('getQuota requires 1 args')
    sys.exit(1)
  pp.pprint(client.getQuota(args[0],))

elif cmd == 'populateJobConfig':
  if len(args) != 1:
    print('populateJobConfig requires 1 args')
    sys.exit(1)
  pp.pprint(client.populateJobConfig(eval(args[0]),))

elif cmd == 'getJobUpdateSummaries':
  if len(args) != 1:
    print('getJobUpdateSummaries requires 1 args')
    sys.exit(1)
  pp.pprint(client.getJobUpdateSummaries(eval(args[0]),))

elif cmd == 'getJobUpdateDetails':
  if len(args) != 2:
    print('getJobUpdateDetails requires 2 args')
    sys.exit(1)
  pp.pprint(client.getJobUpdateDetails(eval(args[0]),eval(args[1]),))

elif cmd == 'getJobUpdateDiff':
  if len(args) != 1:
    print('getJobUpdateDiff requires 1 args')
    sys.exit(1)
  pp.pprint(client.getJobUpdateDiff(eval(args[0]),))

elif cmd == 'getTierConfigs':
  if len(args) != 0:
    print('getTierConfigs requires 0 args')
    sys.exit(1)
  pp.pprint(client.getTierConfigs())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
