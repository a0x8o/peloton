/**
 *  Internal API for Peloton Job Manager
 */

syntax = "proto3";

package peloton.private.jobmgr;

option go_package = "peloton/private/jobmgrsvc";

import "peloton/api/v1alpha/peloton.proto";
import "peloton/api/v1alpha/job/stateless/stateless.proto";


// Request message for JobService.GetThrottledPods method.
message GetThrottledPodsRequest{}

// Response message for JobService.GetThrottledPods method.
message GetThrottledPodsResponse {
  repeated api.v1alpha.peloton.PodName throttled_pods = 1;
}

// Request message for JobService.RefreshJob method.
message RefreshJobRequest {
  // The job ID to look up the job.
  api.v1alpha.peloton.JobID job_id = 1;
}

// Request message for JobService.QueryJobCache method.
message QueryJobCacheRequest {
  // CacheQuerySpec specifies the list of query criteria for jobs,
  // which can be served by cache directly
  message CacheQuerySpec {
    // List of labels to query the jobs. Will match all jobs if the
    // list is empty.
    repeated api.v1alpha.peloton.Label labels = 1;
    // Query jobs by name. This is case sensitive and will
    // look for jobs with name matching the name string.
    // Will match all jobs if name is unset.
    string name = 2;
  }

  // spec used to query job cache
  CacheQuerySpec spec = 1;
}

// Response message for JobService.QueryJobCache method.
message QueryJobCacheResponse {
  message JobCache {
    // The job identifier of the result.
    api.v1alpha.peloton.JobID job_id = 1;
    // The name of the job
    string name = 2;
  }

  // List of job cache query result returned by server.
  repeated JobCache result = 1;
}

// Response message for JobService.RefreshJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
message RefreshJobResponse {}

// Request message for JobService.GetJobCache method.
message GetJobCacheRequest {
  // The job ID to look up the job.
  api.v1alpha.peloton.JobID job_id = 1;
}

// Response message for JobService.GetJobCache method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
message GetJobCacheResponse {
  // The job configuration in cache of the matching job.
  api.v1alpha.job.stateless.JobSpec spec = 1;

  // The job runtime in cache of the matching job.
  api.v1alpha.job.stateless.JobStatus status = 2;
}

// Request message for JobManagerService.GetInstanceAvailabilityInfoForJob
message GetInstanceAvailabilityInfoForJobRequest {
  // The job ID to look up the job.
  api.v1alpha.peloton.JobID job_id = 1;

  // optional field
  // instance ids to filter. If no instances are specified then instance
  // availability information for all instances of the job would be returned.
  repeated uint32 instances = 2;
}

// Response message for JobManagerService.GetInstanceAvailabilityInfoForJob
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
message GetInstanceAvailabilityInfoForJobResponse {
  // map of instance id to instance availability type.
  map<uint32, string> instance_availability_map = 1;
}

service JobManagerService {
  // Get the list of throttled tasks in the system
  rpc GetThrottledPods(GetThrottledPodsRequest) returns(GetThrottledPodsResponse);

  // RefreshJob allows user to load job runtime status from the database
  // and re-execute the action associated with current state.
  rpc RefreshJob(RefreshJobRequest) returns (RefreshJobResponse);

  // GetJobCache gets the job state in the cache.
  rpc GetJobCache(GetJobCacheRequest) returns(GetJobCacheResponse);

  // QueryJobCache queries jobs in the cache
  rpc QueryJobCache(QueryJobCacheRequest) returns (QueryJobCacheResponse);

  // GetInstanceAvailabilityInfoForJob gets instance
  // availability information for the job.
  rpc GetInstanceAvailabilityInfoForJob(GetInstanceAvailabilityInfoForJobRequest)
  returns (GetInstanceAvailabilityInfoForJobResponse);
}
