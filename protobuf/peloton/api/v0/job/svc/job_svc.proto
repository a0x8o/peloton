/**
 *  This file defines the Job Service in Peloton API
 */

syntax = "proto3";

package peloton.api.v0.job.svc;

option go_package = "peloton/api/v0/job/svc";
option java_package = "peloton.api.v0.job.svc";

import "peloton/api/v0/peloton.proto";
import "peloton/api/v0/query/query.proto";
import "peloton/api/v0/job/job.proto";
import "peloton/api/v0/task/task.proto";
import "peloton/api/v0/respool/respool.proto";


/**
 *  Job service defines the job related methods such as create, get,
 *  query and kill jobs.
 */
service JobService {

  // Create a job entity for a given config.
  rpc CreateJob(CreateJobRequest) returns (CreateJobResponse);

  // Get the config of a job entity.
  rpc GetJob(GetJobRequest) returns (GetJobResponse);

  // Query the jobs that match a list of labels.
  rpc QueryJobs(QueryJobsRequest) returns (QueryJobsResponse);

  // Delete a job and stop all related tasks.
  rpc DeleteJob(DeleteJobRequest) returns (DeleteJobResponse);

  // Update a job entity with a new config. This is a temporary API
  // for updating batch jobs. It only supports adding new instances to an
  // existing job. It will be deprecated when the UpgradeService API
  // is implemented.
  rpc UpdateJob(UpdateJobRequest) returns (UpdateJobResponse);

  // Restart the tasks specified in restart request
  // Experimental only
  rpc RestartJob(RestartJobRequest) returns (RestartJobResponse);

  // StartJob the tasks specified in start request
  // Experimental only
  rpc StartJob(StartJobRequest) returns (StartJobResponse);

  // Stop the tasks specified in stop request
  // Experimental only
  rpc StopJob(StopJobRequest) returns (StopJobResponse);

  // Debug only method. Allows user to load job runtime state from DB
  // and re-execute the action associated with current state.
  rpc RefreshJob(RefreshJobRequest) returns (RefreshJobResponse);

  // Debug only method. Get the cache of a job stored in Peloton.
  rpc GetJobCache(GetJobCacheRequest) returns(GetJobCacheResponse);
}


/**
 *  Request message for JobService.CreateJob method.
 */
message CreateJobRequest {
  // The unique job UUID specified by the client. This can be used by
  // the client to re-create a failed job without the side-effect of
  // creating duplicated jobs. If unset, the server will create a new
  // UUID for the job for each invocation.
  peloton.JobID id = 1;

  // The resource pool under which the job should be created. The
  // scheduling of all tasks in the job will be subject to the resource
  // availablity of the resource pool.
  respool.ResourcePoolPath pool = 2;

  // The detailed configuration of the job to be created.
  JobConfig config = 3;

  // The list of secrets for this job
  repeated peloton.Secret secrets = 4;
}


/**
 *  Response message for JobService.CreateJob method.
 *
 *  Return errors:
 *    ALREADY_EXISTS:    if the job ID already exists.o
 *    INVALID_ARGUMENT:  if the job ID or job config is invalid.
 *    NOT_FOUND:         if the resource pool is not found.
 */
message CreateJobResponse {
  // The job ID of the newly created job. Will be the same as the
  // one in CreateJobRequest if provided. Otherwise, a new job ID
  //  will be generated by the server.
  peloton.JobID jobId = 1;
}


/**
 *  Request message for JobService.GetJob method.
 */
message GetJobRequest {
  // The job ID to look up the job.
  peloton.JobID id = 1;
}


/**
 *  Response message for JobService.GetJob method.
 *
 *  Return errors:
 *    NOT_FOUND:  if the job is not found in Peloton.
 */
message GetJobResponse {
  // The job configuration of the matching job.
  JobConfig result = 1;
  /*
    The list of secrets for this job, secret.Value will be empty.
    SecretID and path will be populated, so that caller
    can identify which secret is associated with this job.
   */
  repeated peloton.Secret secrets = 3;
}


/**
 *  Request message for JobService.QueryJobs method.
 */
message QueryJobsRequest {
  // The spec of query criteria for the jobs.
  job.QuerySpec spec = 1;

  // The spec of how to do pagination for the query results.
  query.PaginationSpec pagination = 2;
}


/**
 *  Response message for JobService.QueryJobs method.
 *
 *  Return errors:
 *    INVALID_ARGUMENT:  if the resource pool path or job states are invalid.
 */
message QueryJobsResponse {
  // List of jobs that match the job query criteria.
  repeated JobInfo records = 1;

  // Pagination result of the job query.
  query.Pagination pagination = 2;

  // Return the spec of query criteria from the request.
  job.QuerySpec spec = 3;
}


/**
 *  Request message for JobService.DeleteJob method.
 */
message DeleteJobRequest {
  // The job ID to be deleted.
  peloton.JobID id = 1;
}


/**
 *  Response message for JobService.DeleteJob method.
 *
 *  Return errors:
 *    NOT_FOUND:  if the job is not found in Peloton.
 */
message DeleteJobResponse {
}


/**
 *  Request message for JobService.UpdateJob method.
 */
message UpdateJobRequest {
  // The job ID to be updated.
  peloton.JobID id = 1;
  // The new job config to be applied to the job.
  JobConfig config = 2;
  // The list of secrets for this job
  repeated peloton.Secret secrets = 3;
}


/**
 *  Response message for JobService.UpdateJob method.
 *
 *  Return errors:
 *    INVALID_ARGUMENT:  if the job ID or job config is invalid.
 *    NOT_FOUND:         if the job ID is not found.
 */
message UpdateJobResponse {
}

/**
 * RestartConfig is the optional config for RestartJobRequest
 * Experimental only
 */
message RestartConfig {
  // batch size of rolling restart, if unset or 0 all tasks specified
  // will be restarted at the same time.
  uint32 batchSize = 1;
}

/**
 *  Request message for JobService.RestartJob method.
 *  Experimental only
 */
message RestartJobRequest {
  // The job to restart
  peloton.JobID id = 1;
  // The instances to restart, default to all
  repeated task.InstanceRange ranges = 2;
  // The resourceVersion received from last job operation
  // call for concurrency control
  uint64 resourceVersion = 3;
  // The config for restart a job
  RestartConfig restartConfig = 4;
}

/**
 *  Response message for JobService.RestartJob method.
 *
 *  Return errors:
 *    INVALID_ARGUMENT:  if the job ID or job resourceVersion is invalid.
 *    NOT_FOUND:         if the job ID is not found.
 *
 *  Experimental only
 */
message RestartJobResponse {
  // The new resourceVersion after the operation
  uint64 resourceVersion = 1;
  // updateID associated with the restart
  peloton.UpdateID updateID = 2;
}

/**
 *  Request message for JobService.RefreshJob method.
 *  Experimental only
 */
message RefreshJobRequest {
  // The job ID to look up the job.
  peloton.JobID id = 1;
}


/**
 *  Response message for JobService.RefreshJob method.
 *
 *  Return errors:
 *    NOT_FOUND:  if the job is not found in Peloton.
 */
message RefreshJobResponse {}

/**
 *  Request message for JobService.GetJobCache method.
 */
message GetJobCacheRequest {
  // The job ID to look up the job.
  peloton.JobID id = 1;
}

/**
 *  Response message for JobService.GetJobCache method.
 *
 *  Return errors:
 *    NOT_FOUND:      if the job is not found in Peloton cache.
 *    INTERNAL_ERROR: if fail to read cache due to internal error.
 */
message GetJobCacheResponse {
  // The job configuration in cache of the matching job.
  JobConfig config = 1;

  // The job runtime in cache of the matching job.
  RuntimeInfo runtime = 2;
}

/**
 * StartConfig is the optional config for StartJobRequest
 */
message StartConfig {
  // batch size of rolling start, if unset or 0 all tasks specified
  // will be started at the same time.
  uint32 batchSize = 1;
}

/**
 *  Request message for JobService.StartJob method.
 *  Experimental only
 */
message StartJobRequest {
  // The job to start
  peloton.JobID id = 1;
  // The instances to start, default to all
  repeated task.InstanceRange ranges = 2;
  // The resourceVersion received from last job operation
  // call for concurrency control
  uint64 resourceVersion = 3;
  // The config for starting a job
  StartConfig startConfig = 4;
}

/**
 *  Response message for JobService.StartJob method.
 *
 *  Return errors:
 *    INVALID_ARGUMENT:  if the job ID or job resourceVersion is invalid.
 *    NOT_FOUND:         if the job ID is not found.
 *
 *  Experimental only
 */
message StartJobResponse {
  // The new resourceVersion after the operation
  uint64 resourceVersion = 1;
  // updateID associated with the start
  peloton.UpdateID updateID = 2;
}

/**
 * StopConfig is the optional config for StopJobRequest
 */
message StopConfig {
  // batch size of rolling stop, if unset or 0 all tasks specified
  // will be stop at the same time.
  uint32 batchSize = 1;
}

/**
 *  Request message for JobService.StopJobRequest method.
 *  Experimental only
 */
message StopJobRequest {
  // The job to stop
  peloton.JobID id = 1;
  // The instances to stop, default to all
  repeated task.InstanceRange ranges = 2;
  // The resourceVersion received from last job operation
  // call for concurrency control
  uint64 resourceVersion = 3;
  // The config for stopping a job
  StopConfig stopConfig = 4;
}

/**
 *  Response message for JobService.StopJob method.
 *
 *  Return errors:
 *    INVALID_ARGUMENT:  if the job ID or job resourceVersion is invalid.
 *    NOT_FOUND:         if the job ID is not found.
 *
 *  Experimental only
 */
message StopJobResponse {
  // The new resourceVersion after the operation
  uint64 resourceVersion = 1;
  // updateID associated with the stop
  peloton.UpdateID updateID = 2;
}
