/**
 *  This file defines the Host Service in Peloton API
 */

syntax = "proto3";

import "peloton/api/v0/host/host.proto";

package peloton.api.v0.host.svc;

option go_package = "svcpb";
option java_package = "com.peloton.api.v0.host.svc.pb";

/**
 *  Request message for HostService.QueryHosts method.
 */
message QueryHostsRequest {
    // List of host states to query the hosts. Will return all hosts if the list is empty.
    repeated host.HostState host_states = 1;
}

/**
 *  Response message for HostService.QueryHosts method.
 */
message QueryHostsResponse {
    // List of hosts that match the host query criteria.
    repeated host.HostInfo host_infos = 1;
}

// Request message for HostService.StartMaintenance method.
message StartMaintenanceRequest {
    // List of hosts to be put into maintenance
    repeated string hostnames = 1 [deprecated=true];

    // Host to be put into maintenance
    string hostname = 2;
}

// Response message for HostService.StartMaintenance method.
// Return errors:
//   NOT_FOUND:   if the host is not found.
message StartMaintenanceResponse {
    // Host successfully submitted for maintenance
    string hostname = 1;
}

// Request message for HostService.CompleteMaintenance method.
message CompleteMaintenanceRequest {
    // List of hosts put be brought back up
    repeated string hostnames = 1 [deprecated=true];
    // Host to be removed from maintenance and brought back up
    string hostname = 2;
}

// Response message for HostService.CompleteMaintenance method.
// Return errors:
//   NOT_FOUND:   if the host is not found.
message CompleteMaintenanceResponse {
    // Host successfully submitted for maintenance completion
    string hostname = 1;
}

// Request message for HostService.ListHostPools method.
message ListHostPoolsRequest {}

// Response message for HostService.ListHostPoolsRequest method.
// Return errors:
message ListHostPoolsResponse {
    // Information about all pools
    repeated host.HostPoolInfo pools = 1;
}

// Request message for HostService.CreateHostPool method.
message CreateHostPoolRequest {
    // Name of the pool to create.
    string name = 1;
}

// Response message for HostService.CreateHostPool method.
// Return errors:
//    ALREADY_EXISTS: If a pool with the specified name already exists
//    INVALID_ARGUMENT: If pool name is invalid
message CreateHostPoolResponse {}

// Request message for HostService.DeleteHostPool method.
message DeleteHostPoolRequest {
    // Name of the pool to delete.
    string name = 1;
}

// Response message for HostService.DeleteHostPool method.
// Return errors:
//    NOT_FOUND: If a pool with the specified name does not exist
//    INVALID_ARGUMENT: If you try to delete the default pool
message DeleteHostPoolResponse {}

// Request message for HostService.ChangeHostPool method.
message ChangeHostPoolRequest {
    // Hostname of host to move.
    string hostname = 1;

    // Name of source host-pool of given host.
    string sourcePool = 2;

    // Name of destination host-pool of given host.
    string destinationPool = 3;
}

// Response message for HostService.DeleteHostPool method.
// Return errors:
//    NOT_FOUND: If host doesn't exist
//    INVALID_ARGUMENT: If host is not in the specified source pool, or
//                      destination pool doesn't exist
message ChangeHostPoolResponse {}

// Request message for HostService.MoveHostsRequest method.
message MoveHostsRequest {
    // Name of host pool from which hosts are to be moved.
    string sourcePool = 1;

    // desired number of hosts in source pool
    int32 srcPoolDesiredHosts = 2;

    // Name of host pool to which hosts are to be moved.
    string destinationPool = 3;

    // desired number of hosts in destination pool
    int32 destPoolDesiredHosts = 4;
}

// Response message for HostService.MoveHosts method.
// return Error if hosts can't be moved
message MoveHostsResponse {}

/**
 *  HostService defines the host related methods such as query hosts, start maintenance,
 *  complete maintenance etc.
 */
service HostService
{
    // Get hosts which are in one of the specified states
    rpc QueryHosts(QueryHostsRequest) returns (QueryHostsResponse);

    // Start maintenance on the specified hosts
    rpc StartMaintenance(StartMaintenanceRequest) returns (StartMaintenanceResponse);

    // Complete maintenance on the specified hosts
    rpc CompleteMaintenance(CompleteMaintenanceRequest) returns (CompleteMaintenanceResponse);

    // Get information about all host pools
    rpc ListHostPools(ListHostPoolsRequest)
    returns (ListHostPoolsResponse);

    // Create a host pool
    rpc CreateHostPool(CreateHostPoolRequest)
    returns (CreateHostPoolResponse);

    // Delete a host pool. Hosts in the pool are moved to a
    // default pool.
    rpc DeleteHostPool(DeleteHostPoolRequest)
    returns (DeleteHostPoolResponse);

    // Change the pool to which a host belongs
    rpc ChangeHostPool(ChangeHostPoolRequest)
    returns (ChangeHostPoolResponse);

    // Move specified number of hosts from source pool
    // to destination pool
    rpc MoveHosts(MoveHostsRequest)
    returns (MoveHostsResponse);
}
