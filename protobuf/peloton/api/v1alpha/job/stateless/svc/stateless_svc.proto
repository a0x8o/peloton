// This file defines the Stateless Job Service in Peloton API

syntax = "proto3";

package peloton.api.v1alpha.job.stateless.svc;

option go_package = "peloton/api/v1alpha/job/stateless/svc";
option java_package = "peloton.api.v1alpha.job.stateless.svc";

import "peloton/api/v1alpha/peloton.proto";
import "peloton/api/v1alpha/query/query.proto";
import "peloton/api/v1alpha/job/stateless/stateless.proto";
import "peloton/api/v1alpha/pod/pod.proto";

// Request message for JobService.CreateJob method.
message CreateJobRequest {
  // The unique job UUID specified by the client. This can be used by
  // the client to re-create a deleted job.
  // If unset, the server will create a new UUID for the job for each invocation.
  peloton.JobID job_id = 1;

  // The configuration of the job to be created.
  stateless.JobSpec spec = 2;

  // Experimental: This is a batch feature. The implementation
  // is subject to change (or removal) from stateless.
  // The list of secrets for this job
  repeated peloton.Secret secrets = 3;

  // The creation SLA specification.
  stateless.CreateSpec create_spec = 4;

  // Opaque data supplied by the client
  peloton.OpaqueData opaque_data = 5;
}

// Response message for JobService.CreateJob method.
// Return errors:
//   ALREADY_EXISTS:    if the job ID already exists
//   INVALID_ARGUMENT:  if the job ID or job config is invalid.
//   NOT_FOUND:         if the resource pool is not found.
message CreateJobResponse {
  // The job ID of the newly created job. Will be the same as the
  // one in CreateJobRequest if provided. Otherwise, a new job ID
  //  will be generated by the server.
  peloton.JobID job_id = 1;

  // The current version of the job.
  peloton.EntityVersion version = 2;
}

// Request message for JobService.ReplaceJob method.
message ReplaceJobRequest {
  // The job ID to be updated.
  peloton.JobID job_id = 1;

  // The current version of the job.
  // It is used to implement optimistic concurrency control.
  peloton.EntityVersion version = 2;

  // The new job configuration to be applied.
  stateless.JobSpec spec = 3;

  // The list of secrets for this job
  repeated peloton.Secret secrets = 4;

  // The update SLA specification.
  stateless.UpdateSpec update_spec = 5;

  // Opaque data supplied by the client
  peloton.OpaqueData opaque_data = 6;
}

// Response message for JobService.ReplaceJob method.
// Return errors:
//   INVALID_ARGUMENT:  if the job ID or job config is invalid.
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
message ReplaceJobResponse {
  // The new version of the job.
  peloton.EntityVersion version = 1;
}

// Request message for JobService.PatchJob method.
message PatchJobRequest {
  // The job ID to be updated.
  peloton.JobID job_id = 1;

  // The current version of the job.
  // It is used to implement optimistic concurrency control.
  peloton.EntityVersion version = 2;

  // The new job configuration to be patched.
  stateless.JobSpec spec = 3;

  // The list of secrets for this job
  repeated peloton.Secret secrets = 4;

  // The update SLA specification.
  stateless.UpdateSpec update_spec = 5;

  // Opaque data supplied by the client
  peloton.OpaqueData opaque_data = 6;
}

// Response message for JobService.PatchJob method.
// Return errors:
//   INVALID_ARGUMENT:  if the job ID or job config is invalid.
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
message PatchJobResponse {
  // The new version of the job.
  peloton.EntityVersion version = 1;
}

// Request message for JobService.RestartJob method.
message RestartJobRequest {
  // The job to restart.
  peloton.JobID job_id = 1;

  // The current version of the job.
  // It is used to implement optimistic concurrency control.
  peloton.EntityVersion version = 2;

  // The restart specification.
  stateless.RestartSpec restart_spec = 3;

  // Opaque data supplied by the client
  peloton.OpaqueData opaque_data = 5;
}

// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
message RestartJobResponse {
  // The new version of the job.
  peloton.EntityVersion version = 1;
}

// Request message for JobService.PauseJobWorkflow method.
message PauseJobWorkflowRequest {
  // The job identifier.
  peloton.JobID job_id = 1;

  // The current version of the job.
  peloton.EntityVersion version = 2;

  // Opaque data supplied by the client
  peloton.OpaqueData opaque_data = 3;
}

// Response message for JobService.PauseJobWorkflow method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
message PauseJobWorkflowResponse {
  // The new version of the job.
  peloton.EntityVersion version = 1;
}

// Request message for JobService.ResumeJobWorkflow method.
message ResumeJobWorkflowRequest {
  // The job identifier.
  peloton.JobID job_id = 1;

  // The current version of the job.
  peloton.EntityVersion version = 2;

  // Opaque data supplied by the client
  peloton.OpaqueData opaque_data = 3;
}

// Response message for JobService.ResumeJobWorkflow method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
message ResumeJobWorkflowResponse {
  // The new version of the job.
  peloton.EntityVersion version = 1;
}

// Request message for JobService.AbortJobWorkflow method.
message AbortJobWorkflowRequest {
  // The job identifier.
  peloton.JobID job_id = 1;

  // The current version of the job.
  peloton.EntityVersion version = 2;

  // Opaque data supplied by the client
  peloton.OpaqueData opaque_data = 3;
}

// Response message for JobService.AbortJobWorkflow method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
message AbortJobWorkflowResponse {
  // The new version of the job.
  peloton.EntityVersion version = 1;
}

// Request message for JobService.StartJob method.
message StartJobRequest {
  // The job to start
  peloton.JobID job_id = 1;

  // The current version of the job.
  // It is used to implement optimistic concurrency control.
  peloton.EntityVersion version = 2;
}

// Response message for JobService.StartJob method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
message StartJobResponse {
  // The new version of the job.
  peloton.EntityVersion version = 1;
}

// Request message for JobService.StopJob method.
message StopJobRequest {
  // The job to stop
  peloton.JobID job_id = 1;

  // The current version of the job.
  // It is used to implement optimistic concurrency control.
  peloton.EntityVersion version = 2;
}

// Response message for JobService.StopJob method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
message StopJobResponse {
  // The new version of the job.
  peloton.EntityVersion version = 1;
}

// Request message for JobService.DeleteJob method.
message DeleteJobRequest {
  // The job to be deleted.
  peloton.JobID job_id = 1;

  // The current version of the job.
  // It is used to implement optimistic concurrency control.
  peloton.EntityVersion version = 2;

  // If set to true, it will force a delete of the job even if it is running.
  // The job will be first stopped and deleted. This step cannot be undone,
  // and the job cannot be re-created (with same uuid) till the delete is complete.
  // So, it is recommended to not set force to true.
  bool force = 3;
}

// Response message for JobService.DeleteJob method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid or job is still running.
//   FailedPrecondition:  if the job has not been stopped before delete.
message DeleteJobResponse {}

// Request message for JobService.GetJob method.
message GetJobRequest {
  // The job ID to look up the job.
  peloton.JobID job_id = 1;

  // The version of the job object to fetch.
  // If not provided, then the latest job configuration
  // specification and runtime status are returned.
  // If provided, only the job configuration specification
  // (and no runtime) at a given version is returned.
  peloton.EntityVersion version = 2;

  // If set to true, only return the job summary.
  bool summary_only = 3;
}

// Response message for JobService.GetJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
message GetJobResponse {
  // The configuration specification and runtime status of the job.
  stateless.JobInfo job_info = 1;

  // The job summary.
  stateless.JobSummary summary = 2;

  // The list of secrets for this job, secret.Value will be empty.
  // SecretID and path will be populated, so that caller
  // can identify which secret is associated with this job.
  repeated peloton.Secret secrets = 3;

  // Information about the current/last completed workflow
  // including its state and specification.
  stateless.WorkflowInfo workflow_info = 4;
}

// Request message for JobService.GetJobIDFromJobName method.
message GetJobIDFromJobNameRequest {
  // Job name to lookup for job UUID.
  string job_name = 1;
}

// Response message for JobService.GetJobIDFromJobName method.
// Return errors:
//   NOT_FOUND:         if the job name is not found.
message GetJobIDFromJobNameResponse {
  // The job UUIDs for the job name.
  // Job UUIDs are sorted by descending create timestamp.
  repeated peloton.JobID job_id = 1;
}

// Request message for JobService.GetWorkflowEvents
message GetWorkflowEventsRequest {
  // The job ID to look up the job.
  peloton.JobID job_id = 1;

  // The instance to get workflow events.
  uint32 instance_id = 2;

  // Limits the number of workflow events.
  // If limit is 0, then all events are fetched.
  uint32 limit = 3;
}

// Response message for JobService.GetWorkflowEvents
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
message GetWorkflowEventsResponse {
  // Workflow events for the given workflow
  repeated stateless.WorkflowEvent events = 1;
}

// Request message for JobService.ListPods method.
message ListPodsRequest {
  // The job identifier of the pods to list.
  peloton.JobID job_id = 1;

  // The instance ID range of the pods to list. If unset, all pods
  // in the job will be returned.
  pod.InstanceIDRange range = 2;
}

// Response message for JobService.ListPods method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
message ListPodsResponse {
  // Pod summary for all matching pods.
  repeated pod.PodSummary pods = 1;
}

// Request message for JobService.QueryPods method.
message QueryPodsRequest {
  // The job identifier of the pods to query.
  peloton.JobID job_id = 1;

  // The spec of query criteria for the pods.
  pod.QuerySpec spec = 2;

  // The spec of how to do pagination for the query results.
  query.PaginationSpec pagination = 3;

  // If set to true, only return the pod status and not the configuration.
  bool summary_only = 4;
}

// Response message for JobService.QueryPods method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
message QueryPodsResponse {
  // List of pods that match the pod query criteria.
  repeated pod.PodInfo pods = 1;

  // Pagination result of the pod query.
  query.Pagination pagination = 2;
}

// Request message for JobService.QueryJobs method.
message QueryJobsRequest {
  // The spec of query criteria for the jobs.
  stateless.QuerySpec spec = 1;
}

// Response message for JobService.QueryJobs method.
// Return errors:
//   INVALID_ARGUMENT:  if the resource pool path or job states are invalid.
message QueryJobsResponse {
  // List of jobs that match the job query criteria.
  repeated stateless.JobSummary records = 1;

  // Pagination result of the job query.
  query.Pagination pagination = 2;

  // Return the spec of query criteria from the request.
  stateless.QuerySpec spec = 3;
}

// Request message for JobService.ListJobWorkflows method.
message ListJobWorkflowsRequest {
  // The job identifier.
  peloton.JobID job_id = 1;

  // Limits the number of updates to list for a job.
  uint32 updates_limit = 2;

  // Flag to indicate whether to fetch instance workflow events
  // for that job update.
  bool instance_events = 3;

  // Limits the number of events per instance.
  // If limit is 0, then all events are fetched.
  uint32 instance_events_limit = 4;
}

// Response message for JobService.ListJobWorkflows method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
message ListJobWorkflowsResponse {
  repeated stateless.WorkflowInfo workflow_infos = 1;
}

// Request message for JobService.GetReplaceJobDiffRequest method.
message GetReplaceJobDiffRequest {
  // The job ID to be updated.
  peloton.JobID job_id = 1;

  // The current version of the job.
  peloton.EntityVersion version = 2;

  // The new job configuration to be applied.
  stateless.JobSpec spec = 3;
}

// Response message for JobService.GetReplaceJobDiff method.
// Return errors:
//   INVALID_ARGUMENT:  if the job ID or job config is invalid.
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
message GetReplaceJobDiffResponse {
  // Instances which are being added
  repeated pod.InstanceIDRange instances_added = 1;

  // Instances which are being removed
  repeated pod.InstanceIDRange instances_removed = 2;

  // Instances which are being updated
  repeated pod.InstanceIDRange instances_updated = 3;

  // Instances which are unchanged
  repeated pod.InstanceIDRange instances_unchanged = 4;
}

// Request message for JobService.RefreshJob method.
message RefreshJobRequest {
  // The job ID to look up the job.
  peloton.JobID job_id = 1;
}

// Response message for JobService.RefreshJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
message RefreshJobResponse {}

// Request message for JobService.GetJobCache method.
message GetJobCacheRequest {
  // The job ID to look up the job.
  peloton.JobID job_id = 1;
}

// Response message for JobService.GetJobCache method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
message GetJobCacheResponse {
  // The job configuration in cache of the matching job.
  stateless.JobSpec spec = 1;

  // The job runtime in cache of the matching job.
  stateless.JobStatus status = 2;
}

// Request message for JobService.ListJobs method.
message ListJobsRequest {}

// Response message for JobService.ListJobs method.
message ListJobsResponse {
  // List of all jobs.
  repeated stateless.JobSummary jobs = 1;
}

// Job service defines the job related methods such as create, get, query and kill jobs.
service JobService {
  // Methods which mutate the state of the job.

  // Create a new job with the given configuration.
  rpc CreateJob(CreateJobRequest) returns (CreateJobResponse);

  // Replace the configuration of an existing job with the new configuration.
  // The caller is expected to provide the entire job configuration including
  // the fields which are unchanged.
  rpc ReplaceJob(ReplaceJobRequest) returns (ReplaceJobResponse);

  // Patch the configuration of an existing job. The caller is not expected
  // to provide all the configuration fields and can provide only
  // subset (e.g. provide only the fields which have changed).
  // This is not supported yet.
  rpc PatchJob(PatchJobRequest) returns (PatchJobResponse);

  // Restart the pods specified in the request.
  rpc RestartJob(RestartJobRequest) returns (RestartJobResponse);

  // Pause the current running workflow.
  // If there is no current running workflow, or the current
  // workflow is already paused, then the method is a no-op.
  rpc PauseJobWorkflow(PauseJobWorkflowRequest) returns (PauseJobWorkflowResponse);

  // Resume the current running workflow.
  // If there is no current running workflow, or the current
  // workflow is not paused, then the method is a no-op.
  rpc ResumeJobWorkflow(ResumeJobWorkflowRequest) returns (ResumeJobWorkflowResponse);

  // Abort the current running workflow.
  // If there is no current running workflow, then the method is a no-op.
  rpc AbortJobWorkflow(AbortJobWorkflowRequest) returns (AbortJobWorkflowResponse);

  // Start the pods specified in the request.
  rpc StartJob(StartJobRequest) returns (StartJobResponse);

  // Stop the pods specified in the request.
  rpc StopJob(StopJobRequest) returns (StopJobResponse);

  // Delete a job and all related state.
  rpc DeleteJob(DeleteJobRequest) returns (DeleteJobResponse);

  // Read methods.

  // Get the configuration and runtime status of a job.
  rpc GetJob(GetJobRequest) returns (GetJobResponse);

  // Get the job UUID from job name.
  rpc GetJobIDFromJobName(GetJobIDFromJobNameRequest) returns (GetJobIDFromJobNameResponse);

  // Get the events of the current / last completed workflow of a job
  rpc GetWorkflowEvents(GetWorkflowEventsRequest) returns (GetWorkflowEventsResponse);

  // List all pods in a job for a given range of pod IDs.
  rpc ListPods(ListPodsRequest) returns (stream ListPodsResponse);

  // Query pod info in a job using a set of filters.
  rpc QueryPods(QueryPodsRequest) returns (QueryPodsResponse);

  // Query the jobs using a set of filters.
  // TODO find the appropriate service to put this method in.
  rpc QueryJobs(QueryJobsRequest) returns (QueryJobsResponse);

  // Get summary for all jobs. Results are streamed back to the caller
  // in batches and the stream is closed once all results have been sent.
  rpc ListJobs(ListJobsRequest) returns (stream ListJobsResponse);

  // List all workflows (including current and previously completed) for a given job.
  // Optional parameters to limit the number of updates to list and whether to include
  // instance workflow events can be set. Default is to list of all the updates and
  // do not to fetch instance workflow events.
  rpc ListJobWorkflows(ListJobWorkflowsRequest) returns (ListJobWorkflowsResponse);

  // Get the list of instances which will be added/removed/updated if
  // the given job specification is applied via the ReplaceJob API.
  rpc GetReplaceJobDiff(GetReplaceJobDiffRequest) returns (GetReplaceJobDiffResponse);

  // Debug only methods.
  // TODO move to private job manager APIs.

  // Allows user to load job runtime status from the database
  // and re-execute the action associated with current state.
  rpc RefreshJob(RefreshJobRequest) returns (RefreshJobResponse);

  // Get the job state in the cache.
  rpc GetJobCache(GetJobCacheRequest) returns(GetJobCacheResponse);
}
