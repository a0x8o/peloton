// This file defines the common types in Peloton API that are imported
// by different subpackages.

syntax = "proto3";

package peloton.api.v1alpha.peloton;

option go_package = "peloton/api/v1alpha/peloton";
option java_package = "peloton.api.v1alpha.peloton";

import "google/protobuf/timestamp.proto";

// A unique ID assigned to a Job. This is a UUID in RFC4122 format.
message JobID {
  string value = 1;
}

// A unique name assigned to a pod. By default, the pod name is in the format of
// JobID-<InstanceID>.
message PodName {
  string value = 1;
}

// A unique ID assigned to a pod. It should be treated as an opaque token.
message PodID {
  string value = 1;
}

// A unique ID assigned to a Volume. This is a UUID in RFC4122 format.
message VolumeID {
  string value = 1;
}

// A unique ID assigned to a Resource Pool. This is a UUID in RFC4122 format.
message ResourcePoolID {
  string value = 1;
}

// A unique ID assigned to a Secret. This is a UUID in RFC4122 format.
message SecretID {
  string value = 1;
}

// A unique ID assigned to offers from a host.
message HostOfferID {
  string value = 1;
}

// An opaque token associated with an entity object used to implement
// optimistic concurrency control.
// For API taking EntityVersion, it would return an yarpc error with
// CodeAborted and message "unexpected entity version", if the entity version
// provided does not match the internal version of the entity affected
// (i.e. there is a write-after-read confliect), unless otherwise specified.
// Upon receiving the error, caller is expected to read the entity status
// and its entity version again, and re-perform the operation if needed.
message EntityVersion {
  string value = 1;
}

// Opaque data passed to Peloton from the client.
// Passing an empty string in the structure will unset the existing data.
message OpaqueData {
  string data = 1;
}

// Revision of an entity info, such as JobSpec etc.
message Revision {
  // Version number of the entity info which is monotonically increasing.
  // Clients can use this to guide against race conditions using MVCC.
  uint64 version = 1;

  // The timestamp when the entity info is created.
  uint64 created_at = 2;

  // The timestamp when the entity info is updated.
  uint64 updated_at = 3;

  // The user or service that updated the entity info.
  string updated_by = 4;
}

// Key, value pair used to store free form user-data.
message Label {
  string key = 1;
  string value = 2;
}

// Time range specified by min and max timestamps.
// Time range is left closed and right open: [min, max)
message TimeRange {
  google.protobuf.Timestamp min = 1;
  google.protobuf.Timestamp max = 2;
}

// Secret is used to store secrets per job and contains ID, absolute container
// mount path and base64 encoded secret data.
message Secret {
  message Value
  {
    // Secret data as byte array.
    bytes data = 1;
  }

  // UUID of the secret.
  SecretID secret_id = 1;

  // Path at which the secret file will be mounted in the container.
  string path = 2;

  // Secret value.
  Value value = 3;
}


// Resources describe the resources on a host.
message Resources {
  // Number of CPU cores.
  double cpu = 1;

  // Memory in MB.
  double memMb = 2;

  // Disk in MB.
  double diskMb = 3;

  // Number of GPU cores.
  double gpu = 4;
}
