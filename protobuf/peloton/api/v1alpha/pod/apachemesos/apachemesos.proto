// This file defines the Mesos specific extra configuration for a container.

syntax = "proto3";

package peloton.api.v1alpha.pod.apachemesos;

option go_package = "peloton/api/v1alpha/pod/apachemesos";
option java_package = "peloton.api.v1alpha.pod.apachemesos";

// TBD move to mesos/mesos.proto after mesos/v1/mesos.proto has been removed from pod.proto

// Extra configuration only supported in the Mesos runtime.
message PodSpec {
  enum ContainerType {
    // Invalid container type
    CONTAINER_TYPE_INVALID = 0;

    // Use Docker containerizer
    CONTAINER_TYPE_DOCKER = 1;

    // Use Mesos containerizer
    CONTAINER_TYPE_MESOS = 2;
  }

  // Arbitrary parameters to be passed to Docker CLI.
  message DockerParameter {
    string key = 1;
    string value = 2;
  }

  // URIs specified are fetched before executing the command. If the
  // executable field for an uri is set, executable file permission is set
  // on the downloaded file. Otherwise, if the downloaded file has a recognized
  // archive extension (currently [compressed] tar and zip) it is extracted into
  // the executor's working directory. This extraction can be disabled by setting
  // `extract` to false. In addition, any environment variables are set before
  // executing the command (so they can be used to "parameterize" the command).
  // This used to fetch binaries in stateless workloads and data bundles in batch workloads.
  // TBD After this is supported by Kubelet runtime, it should be moved to pod.ContainerSpec.
  message URI {
    string value = 1;

    bool executable = 2;

    // In case the fetched file is recognized as an archive, extract
    // its contents into the sandbox. Note that a cached archive is
    // not copied from the cache to the sandbox in case extraction
    // originates from an archive in the cache.
    bool extract = 3;

    // If this field is "true", the fetcher cache will be used. If not,
    // fetching bypasses the cache and downloads directly into the
    // sandbox directory, no matter whether a suitable cache file is
    // available or not. The former directs the fetcher to download to
    // the file cache, then copy from there to the sandbox. Subsequent
    // fetch attempts with the same URI will omit downloading and copy
    // from the cache as long as the file is resident there. Cache files
    // may get evicted at any time, which then leads to renewed downloading.
    bool cache = 4;

    // The fetcher's default behavior is to use the URI string's basename to
    // name the local copy. If this field is provided, the local copy will be
    // named with its value instead. If there is a directory component (which
    // must be a relative path), the local copy will be stored in that
    // subdirectory inside the sandbox.
    string output_file = 5;

  }

  // Configuration for the mesos executor.
  message ExecutorSpec {
    enum ExecutorType {
      EXECUTOR_TYPE_INVALID = 0;
      // Mesos default executor
      EXECUTOR_TYPE_DEFAULT = 1;
      // Custom Mesos executor like Thermos
      EXECUTOR_TYPE_CUSTOM = 2;
    }

    // Resources to be given to the executor.
    message Resources {
      // CPU resources to be given to the executor.
      double cpu = 1;

      // Memory (in MB) to be given to the executor.
      double mem_mb = 2;
    }

    // Executor type. This is mandatory field, and if not provided,
    // executor type is set to EXECUTOR_TYPE_INVALID.
    ExecutorType type = 1;

    // The executor identifier
    string executor_id = 2;

    // Executor data
    bytes data = 3;

    // Executor resources
    Resources resources = 4;
  }

  // Network specification to determine which network should the container
  // connect to. By default, the container connects to the host network.
  // TODO Move to PodSpec once we determine how the network namespace in
  // kubelets will get configured.
  message NetworkSpec {
    // Type of the network the container will connect to.
    enum NetworkType {
      NETWORK_TYPE_INVALID =  0;
      // Connect container to host network.
      NETWORK_TYPE_HOST = 1;
      // Connect container to bridge on the host to allow containers
      // running on the same host to connect to each other.
      NETWORK_TYPE_BRIDGE = 2;
      // Disable networking for the container.
      NETWORK_TYPE_NONE = 3;
      // Connect to a user defined network.
      NETWORK_TYPE_USER = 4;
    }

    // The network type.
    NetworkType type = 1;

    // Name of the user network which will be used by network isolator to determine
    // the network that the container joins. It is up to the network isolator
    // on the host to decide how to interpret this field.
    string name = 2;
  }

  // Type of containerizer to use.
  ContainerType type = 1;

  // Parameters to be passed to the Docker cli.
  repeated DockerParameter docker_parameters = 2;

  // URIs fetched before executing the command.
  repeated URI uris = 3;

  // If shell is set to true, then the command will be launched via shell.
  // TBD After this is supported by Kubelet runtime, move to pod.CommandSpec.
  // This is a mandatory field to be provided if the additional mesos specification
  // is provided as part of the pod specification.
  bool shell = 4;

  // The executor configuration.
  ExecutorSpec executor_spec = 5;

  // The docker network configuration. This is only applicable when the container
  // type is selected to be DOCKER.
  NetworkSpec network_spec = 6;
}
