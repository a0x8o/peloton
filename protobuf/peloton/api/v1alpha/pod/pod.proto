// This file defines the Pod related messages in Peloton API.
// The Pod APIs are heavily dependent on the API provided by
// the runtime running in the host which brings up the containers
// on the host. Hence, they look very similar to the pod/container
// specification and status provided by Kubelet and Mesos (with Default
// and Thermos executors) which are the host runtimes supported in Peloton.

syntax = "proto3";

package peloton.api.v1alpha.pod;

option go_package = "peloton/api/v1alpha/pod";
option java_package = "peloton.api.v1alpha.pod";

import "mesos/v1/mesos.proto";
import "peloton/api/v1alpha/peloton.proto";
import "peloton/api/v1alpha/pod/apachemesos/apachemesos.proto";
import "peloton/api/v1alpha/query/query.proto";
import "peloton/api/v1alpha/volume/volume.proto";


// Resource configuration for a container.
message ResourceSpec {

  // CPU limit in number of CPU cores.
  double cpu_limit = 1;

  // Memory limit in MB.
  double mem_limit_mb = 2;

  // Disk limit in MB.
  double disk_limit_mb = 3;

  // File descriptor limit.
  uint32 fd_limit = 4;

  // GPU limit in number of GPUs.
  double gpu_limit = 5;
}

// CommandSpec describes a command to be run in the container.
message CommandSpec {
  // value is the command line to execute inside the container.
  string value = 1;

  // Arguments to the command.
  repeated string arguments = 2;
}

// HTTPGetSpec describes an action based on HTTP Get request.
message HTTPGetSpec {

  // HTTPHeader describes a custom HTTP header to be used in the HTTP request.
  message HTTPHeader {
    // The header field name
    string name = 1;

    // The header field value
    string value = 2;
  }

  // The scheme to use for connecting to the host.
  // Currently http and https are supported.
  string scheme = 1;

  // Port to send the HTTP GET.
  // Deprecated.
  uint32 port = 2;

  // The request path on the HTTP server.
  string path = 3;

  // Custom HTTP headers to set in the request.
  // HTTP allows repeated headers.
  repeated HTTPHeader http_headers = 4;

  // Port to send the HTTP GET.
  PortSpec port_spec = 5;
}

// Health check configuration for a container.
message HealthCheckSpec {
  // Whether the health check is enabled.
  bool enabled = 1;

  // Start time wait in seconds.
  // Default value is 15.
  uint32 initial_interval_secs = 2;

  // Interval in seconds between two health checks.
  // Default value is 10.
  uint32 interval_secs = 3;

  // Max number of consecutive failures before failing health check.
  // Default value is 3.
  uint32 max_consecutive_failures = 4;

  // Health check command timeout in seconds.
  // Default value is 20.
  uint32 timeout_secs = 5;

  // Type of health check to run.
  enum HealthCheckType {
    // Reserved for future compatibility of new types.
    HEALTH_CHECK_TYPE_UNKNOWN = 0;

    // Command line based health check
    HEALTH_CHECK_TYPE_COMMAND = 1;

    // HTTP endpoint based health check
    HEALTH_CHECK_TYPE_HTTP = 2;
  }

  // Deprecated.
  message CommandCheck {
    // Health check command to be executed.
    // Note that this command by default inherits all environment varibles from
    // the container it's monitoring, unless `unshare_environments` is set to true.
    string command = 1;

    // If set, this check will not share the environment variables of the container.
    bool unshare_environments = 2;
  }

  // Deprecated.
  message HTTPCheck {
    // HTTP health check to be executed.
    // Sends a GET request to scheme://<host>:port/path. Host is not
    // configurable and is resolved automatically.

    // Currently http and https are supported.
    string scheme = 1;

    // Port to send the HTTP GET.
    uint32 port = 2;

    // The request path.
    string path = 3;
  }

  // Type of health check to run.
  HealthCheckType type = 6;

  // Only applicable when type is `COMMAND`.
  // Deprecated
  CommandCheck command_check = 7;

  // Only applicable when type is 'HTTP'.
  // Deprecated
  HTTPCheck http_check = 8;

  // Minimum consecutive successes for the health check to be
  // considered successful after a failure. Defaults to 1.
  // Only available in the Kubelet runtime.
  uint32 success_threshold = 9;

  // Command to run in the container to do the health check.
  // Only applicable when type is `COMMAND`.
  CommandSpec command = 10;

  // HTTP Get request to perform.
  // Only applicable when type is 'HTTP'.
  HTTPGetSpec http_get = 11;
}


// Network port configuration for a container.
message PortSpec {
  // Type of the port
  enum PortType {
    // Invalid port type
    PORT_TYPE_INVALID = 0;
    // Static port
    PORT_TYPE_STATIC = 1;
    // Dynamic port that will be exported into environment variable
    PORT_TYPE_DYNAMIC_ENV_VAR = 2;
    // Dynamic port specified as a template variable
    PORT_TYPE_DYNAMIC_TEMPLATE_VAR = 3;
  }

  // Name of the network port, e.g. http, tchannel. Required field.
  string name = 1;

  // Static port number assigned. Only applicable when type is PORT_TYPE_STATIC.
  uint32 value = 2;

  // Environment variable name to be exported when running a container for this
  // port. Only applicable when type is PORT_TYPE_DYNAMIC_ENV_VAR.
  string env_name = 3;

  // Template variable for a dynamic port in the format: {{port.$NAME}}, where
  // $NAME is a unique name of the port that can contain characters 'a'-'z',
  // '-', '_' and '.'.
  // This variable can be used in other parts of PodSpec to reference a port
  // value (for example in env variables). Specifying a port as a template
  // variable allows communicating the value of the port between containers
  // in the pod. Only applicable when type is PORT_TYPE_DYNAMIC_TEMPLATE_VAR.
  string template_name = 4;

  // Type of the port
  PortType type = 5;
}

// Constraint represents a host label constraint or a related pods label constraint.
// This is used to require that a host have certain label constraints or to require
// that the pods already running on the host have certain label constraints.
message Constraint {
  enum Type {
    // Reserved for compatibility.
    CONSTRAINT_TYPE_INVALID = 0;
    CONSTRAINT_TYPE_LABEL = 1;
    CONSTRAINT_TYPE_AND = 2;
    CONSTRAINT_TYPE_OR = 3;
  }

  Type type = 1;

  LabelConstraint label_constraint = 2;
  AndConstraint   and_constraint = 3;
  OrConstraint    or_constraint = 4;
}

// AndConstraint represents a logical 'and' of constraints.
message AndConstraint {
  repeated Constraint constraints = 1;
}

// OrConstraint represents a logical 'or' of constraints.
message OrConstraint {
  repeated Constraint constraints = 1;
}

// LabelConstraint represents a constraint on the number of occurrences of a
// given label from the set of host labels or pod labels present on the host.
message LabelConstraint {
  // Condition represents a constraint on the number of occurrences of the label.
  enum Condition {
    LABEL_CONSTRAINT_CONDITION_INVALID = 0;
    LABEL_CONSTRAINT_CONDITION_LESS_THAN = 1;
    LABEL_CONSTRAINT_CONDITION_EQUAL = 2;
    LABEL_CONSTRAINT_CONDITION_GREATER_THAN = 3;
  }

  // Kind represents whatever the constraint applies to the labels on the host
  // or to the labels of the pods that are located on the host.
  enum Kind {
    LABEL_CONSTRAINT_KIND_INVALID = 0;
    LABEL_CONSTRAINT_KIND_POD = 1;
    LABEL_CONSTRAINT_KIND_HOST = 2;
  }

  // Determines which labels the constraint should apply to.
  Kind kind = 1;
  // Determines which constraint there should be on the number of occurrences of the label.
  Condition condition = 2;
  // The label which this defines a constraint on:
  // For Kind == HOST, each attribute on host agent is transformed to a label,
  // with `hostname` as a special label which is always inferred from agent
  // hostname and set.
  peloton.Label label = 3;
  // A limit on the number of occurrences of the label.
  uint32 requirement = 4;
}

// Restart policy for a pod.
message RestartPolicy {
  // Max number of pod failures can occur before giving up scheduling retry, no
  // backoff for now. Default 0 means no retry on failures.
  uint32 max_failures = 1;
}

// Preemption policy for a pod.
message PreemptionPolicy {
  // This policy defines if the pod should be restarted after it is
  // preempted. If set to true the pod will not be rescheduled
  // after it is preempted. If set to false the pod will be rescheduled.
  // Defaults to false
  bool kill_on_preempt = 2;
}

// Persistent volume configuration for a pod.
// Deprecated
message PersistentVolumeSpec {
    // Volume mount path inside container.
    string container_path = 1;

    // Volume size in MB.
    uint32 size_mb = 2;
}

// Environment represents an environment variable present in a container.
message Environment {
  // Name of the environment variable.
  string name = 1;

  // Value of the environment variable.
  string value = 2;

  // TBD add secret environment variables
}

// VolumeMount describes a mounting of a Volume within a container.
message VolumeMount {
  // This must match the Name of a Volume in the PodSpec.
  string name = 1;

  // Mounted read-only if true, read-write otherwise (false or unspecified).
  bool read_only = 2;

  // Path within the container at which the volume should be mounted.
  string mount_path = 3;
}

// A single application container running inside a pod.
message ContainerSpec {
  // Name of the container.
  // Each container in a pod must have a unique name.
  // Cannot be updated.
  string name = 1;

  // Resource config of the container
  ResourceSpec resource = 2;

  // Container config of the container
  // Deprecated.
  mesos.v1.ContainerInfo container = 3;

  // Command line config of the container
  // Deprecated.
  mesos.v1.CommandInfo command = 4;

  // Custom executor config of the task.
  // Deprecated.
  mesos.v1.ExecutorInfo executor = 8;

  // Liveness health check config of the container
  HealthCheckSpec liveness_check = 5;

  // Readiness health check config of the container
  // This is currently not supported.
  HealthCheckSpec readiness_check = 6;

  // List of network ports to be allocated for the container.
  // These ports will be assigned on the pod network namespace
  // if the pod has its own network name space.
  // If the pod does not have its own network name space, the
  // ports will be assigned on the host network.
  repeated PortSpec ports = 7;

  // Entrypoint command.
  CommandSpec entrypoint = 9;

  // List of environment variables to set in the container.
  repeated Environment environment = 10;

  // Image name.
  string image = 11;

  // Pod volumes to mount into the container's filesystem.
  repeated VolumeMount volume_mounts = 12;
}

// Pod configuration for a given job instance
// Note that only add string/slice/ptr type into PodConfig directly due to
// the limitation of go reflection inside our pod specific config logic.
message PodSpec {
  // Name of the pod
  peloton.PodName pod_name = 1;

  // List of user-defined labels for the pod
  repeated peloton.Label labels = 2;

  // List of initialization containers belonging to the pod.
  // These containers are assumed to run to completion and
  // are executed in order prior to containers being started.
  // If any init container fails, the pod is considered to have failed.
  // Init containers cannot be configured to have readiness or liveness health checks.
  repeated ContainerSpec init_containers = 3;

  // List of containers belonging to the pod.
  // These will be started in parallel after init containers terminate.
  // There must be at least one container in a pod.
  repeated ContainerSpec containers = 4;

  // Constraint on the attributes of the host or labels on pods on the host
  // that this pod should run on.
  // Use `AndConstraint`/`OrConstraint` to compose multiple constraints if
  // necessary.
  Constraint constraint = 5;

  // Pod restart policy on failures
  RestartPolicy restart_policy = 6;

  // Persistent volume config of the pod.
  // Deprecated
  PersistentVolumeSpec volume = 7;

  // Preemption policy of the pod
  PreemptionPolicy preemption_policy = 8;

  // Whether this is a controller pod. A controller is a special batch pod
  // which controls other pods inside a job. E.g. spark driver pods in a spark
  // job will be a controller pod.
  bool controller = 9;

  // This is used to set the amount of time between when the executor sends the
  // SIGTERM message to gracefully terminate a pod and when it kills it by
  // sending SIGKILL. If you do not set the grace period duration the default is
  // 30 seconds.
  uint32 kill_grace_period_seconds = 10;

  // revocable represents pod to use physical or slack resources.
  bool revocable = 11;

  // List of volumes that can be mounted by containers belonging to the pod.
  repeated volume.VolumeSpec volumes = 12;

  // Extra configuration specific to the Mesos runtime.
  // Experimental and is subject to change.
  apachemesos.PodSpec mesos_spec = 13;

  // List of network ports to be allocated for all the containers in the pod
  // on the host network.
  repeated PortSpec host_ports = 14;
}

// Runtime states of a container in a pod.
enum ContainerState {
  // Invalid state.
  CONTAINER_STATE_INVALID = 0;

  // The container has not been created yet.
  CONTAINER_STATE_PENDING = 1;

  // The container has been launched.
  CONTAINER_STATE_LAUNCHED = 2;

  // The container is being started on a host.
  CONTAINER_STATE_STARTING = 3;

  // The container is running on a host.
  CONTAINER_STATE_RUNNING = 4;

  // The container terminated with an exit code of zero.
  CONTAINER_STATE_SUCCEEDED = 5;

  // The container terminated with a non-zero exit code.
  CONTAINER_STATE_FAILED = 6;

  // The container is being killed.
  CONTAINER_STATE_KILLING = 7;

  // Execution of the container was terminated by the system.
  CONTAINER_STATE_KILLED = 8;
}

// HealthState is the health check state of a container.
enum HealthState {
  // Default value.
  HEALTH_STATE_INVALID = 0;

  // If the health check config is not enabled in the container config,
  // then the health state is DISABLED.
  HEALTH_STATE_DISABLED = 1;

  // If the health check config is enabled in the container config,
  // but the container has not reported the output of the health check yet,
  // then the health state is UNKNOWN.
  HEALTH_STATE_UNKNOWN = 2;

  // The container passes the health check.
  HEALTH_STATE_HEALTHY = 3;

  // The container failed to pass the health check.
  HEALTH_STATE_UNHEALTHY = 4;
}

// The result of the health check.
message HealthStatus {
  // The health check state.
  HealthState state = 1;

  // The output of the health check run.
  string output = 2;
}

// TerminationStatus contains details about termination of a task. It mainly
// contains Peloton-specific reasons for termination.
message TerminationStatus {
   // Reason lists various causes for a task termination
   enum Reason {
     // Default value.
     TERMINATION_STATUS_REASON_INVALID = 0;

     // Task was killed because a stop request was received from a client.
     TERMINATION_STATUS_REASON_KILLED_ON_REQUEST = 1;

     // Task failed. See also TerminationStatus.exit_code,
     // TerminationStatus.signal and ContainerStatus.message.
     TERMINATION_STATUS_REASON_FAILED = 2;

     // Task was killed to put the host in to maintenance.
     TERMINATION_STATUS_REASON_KILLED_HOST_MAINTENANCE = 3;

     // Task was killed to reclaim resources allocated to it.
     TERMINATION_STATUS_REASON_PREEMPTED_RESOURCES = 4;

     // Task was killed due to deadline tracker exceeding task timeout
     TERMINATION_STATUS_REASON_DEADLINE_TIMEOUT_EXCEEDED = 5;

     // Task was killed for update
     TERMINATION_STATUS_REASON_KILLED_FOR_UPDATE = 6;

     // Task was killed for restart
     TERMINATION_STATUS_REASON_KILLED_FOR_RESTART = 7;

     // Task was killed for sla aware restart
     TERMINATION_STATUS_REASON_KILLED_FOR_SLA_AWARE_RESTART = 8;
   }

  // Reason for termination.
  Reason reason = 1;

  // If non-zero, exit status when the container terminated.
  uint32 exit_code = 2;

  // Name of signal received by the container when it terminated.
  string signal = 3;
}

// Runtime status of a container in a pod.
message ContainerStatus {
  // Name of the container
  string name = 1;

  // Runtime state of the container.
  ContainerState state = 2;

  // Dynamic ports reserved on the host while this container is running.
  map<string, uint32> ports = 3;

  // The message that explains the current state of a container such as why
  // the container is failed. Only track the latest one if the container has been
  // retried and failed multiple times.
  string message = 4;

  // The reason that explains the current state of a container. Only track
  // the latest one if the container has been retried and failed multiple times.
  string reason = 5;

  // The number of times the container has failed after retries.
  uint32 failure_count = 6;

  // The result of the health check.
  HealthStatus healthy = 7;

  // The image the container is running.
  string image = 8;

  // The time when the container starts to run. Will be unset if the
  // pod hasn't started running yet. The time is represented in
  // RFC3339 form with UTC timezone.
  string start_time = 9;

  // The time when the container terminated. Will be unset if the
  // pod hasn't completed yet. The time is represented in
  // RFC3339 form with UTC timezone.
  string completion_time = 10;

  // Termination status of the task. Set only if the task is in a non-successful
  // terminal state such as CONTAINER_STATE_FAILED or CONTAINER_STATE_KILLED.
  TerminationStatus terminationStatus = 11;
}

// Runtime states of a pod instance.
enum PodState {
  // Invalid state.
  POD_STATE_INVALID = 0;

  // The pod is being initialized.
  POD_STATE_INITIALIZED = 1;

  // The pod is pending and waiting for resources.
  POD_STATE_PENDING = 2;

  // The pod has been allocated with resources and ready for placement.
  POD_STATE_READY = 3;

  // The pod is being placed to a host based on its resource
  // requirements and constraints.
  POD_STATE_PLACING = 4;

  // The pod has been assigned to a host matching the resource
  // requirements and constraints.
  POD_STATE_PLACED = 5;

  // The pod is taken from resmgr to be launched.
  POD_STATE_LAUNCHING = 6;

  // The pod is being launched in Job manager.
  POD_STATE_LAUNCHED = 7;

  // Either init containers are starting/running or the main containers
  // in the pod are being started.
  POD_STATE_STARTING = 8;

  // All containers in the pod are running.
  POD_STATE_RUNNING = 9;

  // All containers in the pod terminated with an exit code of zero.
  POD_STATE_SUCCEEDED = 10;

  // At least on container in the pod terminated with a non-zero exit code.
  POD_STATE_FAILED = 11;

  // The pod is lost.
  POD_STATE_LOST = 12;

  // The pod is being killed.
  POD_STATE_KILLING = 13;

  // At least one of the containers in the pod was terminated by the system.
  POD_STATE_KILLED = 14;

  // The pod is being preempted by another one on the node.
  POD_STATE_PREEMPTING = 15;

  // The pod is to be deleted after termination.
  POD_STATE_DELETED = 16;

  // The pod is to be reserved on a node.
  POD_STATE_RESERVED = 17;
}

// Runtime status of a pod instance in a Job.
message PodStatus {
  // Runtime state of the pod.
  PodState state = 1;

  // The current pod ID for this pod.
  peloton.PodID pod_id = 2;

  // The time when the pod starts to run. Will be unset if the
  // pod hasn't started running yet. The time is represented in
  // RFC3339 form with UTC timezone.
  string start_time = 3;

  // The time when the pod is completed. Will be unset if the
  // pod hasn't completed yet. The time is represented in
  // RFC3339 form with UTC timezone.
  string completion_time = 4;

  // The name of the host where the pod is running.
  string host = 5;

  // Status of the init containers.
  repeated ContainerStatus init_containers_status = 6;

  // Status of the containers.
  repeated ContainerStatus containers_status = 7;

  // The desired state of the pod which should be eventually reached
  // by the system.
  PodState desired_state = 8;

  // The message that explains the current state of a pod.
  string message = 9;

  // The reason that explains the current state of a pod.
  string reason = 10;

  // The number of times the pod has failed after retries.
  uint32 failure_count = 11;

  // persistent volume id.
  // Deprecated.
  peloton.VolumeID volume_id = 12;

  // The entity version currently used by the pod.
  // TODO Avoid leaking job abstractions into public pod APIs.
  // Remove after internal protobuf structures are defined.
  peloton.EntityVersion version = 13;

  // The desired entity version that should be used by the pod.
  // TODO Avoid leaking job abstractions into public pod APIs.
  // Remove after internal protobuf structures are defined.
  peloton.EntityVersion desired_version = 14;

  // the id of mesos agent on the host to be launched.
  // Deprecated.
  mesos.v1.AgentID agent_id = 15;

  // Revision of the current pod status.
  peloton.Revision revision = 16;

  // The pod id of the previous pod.
  peloton.PodID prev_pod_id = 17;

  // The resource usage for this pod. The map key is each resource kind
  // in string format and the map value is the number of unit-seconds
  // of that resource used by the job. Example: if a pod that uses 1 CPU
  // and finishes in 10 seconds, this map will contain <"cpu":10>.
  map<string, double> resource_usage = 18;

  // The desired pod ID for this pod.
  peloton.PodID desired_pod_id = 19;

  // The name of the host where the pod should be running on upon restart.
  // It is used for best effort in-place update/restart.
  string desiredHost = 20;

  // The identifier for the host runtime agent.
  string host_id = 21;
}

// Info of a pod in a Job.
message PodInfo {
  // Configuration of the pod.
  PodSpec spec = 1;

  // Runtime status of the pod.
  PodStatus status = 2;
}

// Summary information about a pod.
message PodSummary {
  // Name of the pod.
  peloton.PodName pod_name = 1;

  // Runtime status of the pod.
  PodStatus status = 3;
}

// Pod InstanceID range [from, to)
message InstanceIDRange {
  uint32 from = 1;
  uint32 to = 2;
}

// QuerySpec specifies the list of query criteria for pods. All
// indexed fields should be part of this message. And all fields
// in this message have to be indexed too.
message QuerySpec {
  // The spec of how to do pagination for the query results.
  query.PaginationSpec pagination = 1;

  // List of pod states to query the pods. Will match all pods if
  // the list is empty.
  repeated PodState pod_states = 2;

  // List of pod names to query the pods. Will match all names if
  // the list is empty.
  repeated peloton.PodName names = 3;

  // List of hosts to query the pods. Will match all hosts if
  // the list is empty.
  repeated string hosts = 4;

}

// Pod events of a particular run of a job instance.
message PodEvent {
  // The current pod ID.
  peloton.PodID pod_id = 1;

  // Actual state of a pod.
  string actual_state = 2;

  // Goal State of a pod.
  string desired_state = 3;

  // The time when the event was created. The time is represented in
  // RFC3339 form with UTC timezone.
  string timestamp = 4;

  // The entity version currently used by the pod.
  peloton.EntityVersion version = 5;

  // The desired entity version that should be used by the pod.
  peloton.EntityVersion desired_version = 6;

  // The agentID for the pod.
  string agent_id = 7;

  // The host on which the pod is running.
  string hostname = 8;

  // Short human friendly message explaining state.
  string message = 9;

  // The short reason for the pod event.
  string reason = 10;

  // The previous pod ID.
  peloton.PodID prev_pod_id = 11;

  // The health check result of the pod.
  string healthy = 12;

  // The desired pod ID.
  peloton.PodID desired_pod_id = 13;

  // Status of the containers.
  repeated ContainerStatus container_status = 14;

  // Status of the init containers.
  repeated ContainerStatus init_container_status = 15;
}
