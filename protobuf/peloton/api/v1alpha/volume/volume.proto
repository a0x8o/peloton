// This file defines the volume related messages in Peloton API 

syntax = "proto3";

package peloton.api.v1alpha.volume;

option go_package = "peloton/api/v1alpha/volume";
option java_package = "peloton.api.v1alpha.volume";

import "peloton/api/v1alpha/peloton.proto";

// Volume configuration.
message VolumeSpec {
  // Volume's name. Must be unique within a pod.
  string name = 1;

  // Type of the volume
  enum VolumeType {
    // Invalid volume type
    VOLUME_TYPE_INVALID = 0;
    // Empty directory for the pod.
    VOLUME_TYPE_EMPTY_DIR = 1;
    // Host path mapped into the pod.
    VOLUME_TYPE_HOST_PATH = 2;
  }

  // Type of the volume for the pod.
  VolumeType type = 2;

  // Represents an empty directory for a pod.
  // This is available only for the Kubelet runtime.
  message EmptyDirVolumeSource {
    // What type of storage medium should back this directory.
    // The default is "" which means to use the node's default medium.
    // Must be an empty string (default) or Memory.
    string medium = 1;

    // Total amount of local storage required for this EmptyDir volume.
    // The size limit is also applicable for memory medium.
    // The maximum usage on memory medium EmptyDir would be the minimum value
    // between the value specified here and the sum of memory limits of all
    // containers in a pod. The default is nil which means that the limit is undefined.
    uint32 size_in_mb = 2;
  }

  // EmptyDir represents a temporary directory that shares a pod's lifetime.
  EmptyDirVolumeSource empty_dir = 3;

  // Represents a host path mapped into a pod.
  message HostPathVolumeSource {
    // Path of the directory on the host.
    string path = 1;
  }

  // HostPath represents a pre-existing file or directory on the host
  // machine that is directly exposed to the container.
  HostPathVolumeSource host_path = 4;

  // TBD add secrets
}

// States of a persistent volume
// Deprecated
enum VolumeState {
  // Reserved for future compatibility of new states.
  VOLUME_STATE_INVALID = 0;

  // The persistent volume is being initialized.
  VOLUME_STATE_INITIALIZED = 1;

  // The persistent volume is created successfully.
  VOLUME_STATE_CREATED = 2;

  // The persistent volume is deleted.
  VOLUME_STATE_DELETED = 3;
}

// Persistent volume information.
// Deprecated
message PersistentVolumeInfo {
  // ID of the persistent volume.
  peloton.VolumeID volume_id = 1;

  // ID of the pod that owns the volume.
  peloton.PodName pod_name = 2;

  // Hostname of the persisted volume.
  string hostname = 3;

  // Current state of the volume.
  VolumeState state = 4;

  // Goal state of the volume.
  VolumeState desired_state = 5;

  // Volume size in MB.
  uint32 size_mb = 6;

  // Volume mount path inside container.
  string container_path = 7;

  // Volume creation time.
  string create_time = 8;

  // Volume info last update time.
  string update_time = 9;
}
