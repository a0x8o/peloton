// @generated AUTO GENERATED - DO NOT EDIT! 117d51fa2854b0184adc875246a35929bbbf0a91

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package placement

import (
	"time"

	"github.com/uber/peloton/pkg/placement/plugins/mimir/lib/generation"
	"github.com/uber/peloton/pkg/placement/plugins/mimir/lib/model/labels"
	"github.com/uber/peloton/pkg/placement/plugins/mimir/lib/model/metrics"
	"github.com/uber/peloton/pkg/placement/plugins/mimir/lib/model/placement"
)

// GroupBuilder is used to generate new groups for use in tests and benchmarks.
type GroupBuilder interface {
	// Name will use the Label.String() method value of the generated value from the label template.
	Name(template labels.Template) GroupBuilder

	// AddMetric will add the metric of the given type with the given distribution.
	AddMetric(metricType metrics.Type, value generation.Distribution) GroupBuilder

	// AddLabel will add a label generated by the label template.
	AddLabel(template labels.Template) GroupBuilder

	// Generate will generate a group that depends on the random source and the time.
	Generate(random generation.Random, time time.Duration) *placement.Group
}

// NewGroupBuilder will create a new group builder for generating groups.
func NewGroupBuilder() GroupBuilder {
	return &groupBuilder{
		name:    labels.NewTemplate(),
		metrics: map[metrics.Type]generation.Distribution{},
		labels:  map[labels.Template]struct{}{},
	}
}

type groupBuilder struct {
	name    labels.Template
	metrics map[metrics.Type]generation.Distribution
	labels  map[labels.Template]struct{}
}

func (builder *groupBuilder) Name(template labels.Template) GroupBuilder {
	builder.name = template
	return builder
}

func (builder *groupBuilder) AddMetric(metricType metrics.Type, value generation.Distribution) GroupBuilder {
	builder.metrics[metricType] = value
	return builder
}

func (builder *groupBuilder) AddLabel(template labels.Template) GroupBuilder {
	builder.labels[template] = struct{}{}
	return builder
}

func (builder *groupBuilder) Generate(random generation.Random, time time.Duration) *placement.Group {
	result := placement.NewGroup(builder.name.Instantiate().String())
	for metricType, distribution := range builder.metrics {
		result.Metrics.Set(metricType, distribution.Value(random, time))
	}
	for factory := range builder.labels {
		result.Labels.Add(factory.Instantiate())
	}
	return result
}
